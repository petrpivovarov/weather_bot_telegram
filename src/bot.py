import telebot
from geopy import geocoders
import requests
import datetime
from telebot import types

# emoji
cityscape = "üèô"
sun = "‚òÄ"
thermometr = 'üå°'
umbrella = '‚òÇ'
wave_hand = 'üëã'
calendar = 'üìÖ'
data_all = {'user_id': '00000'}
degree_sign = u'\N{DEGREE SIGN}'

def geo_pos(city: str):
    geolocator = geocoders.Nominatim(user_agent="telebot")
    location = geolocator.geocode(city)
    latitude = str(location.latitude)
    longitude = str(location.longitude)
    return latitude, longitude


def get_weather(city: str):
    res = requests.get("http://api.openweathermap.org/data/2.5/find",
                       params={'lat': str(geo_pos(city)[0]), 'lon': str(geo_pos(city)[1]),
                               'type': 'like', 'units': 'metric', 'APPID': "aee03afe0ed04072dcaf918fcf3ba110",
                               'lang': 'ru'})
    data = res.json()
    return data


def give_weather_now(city: str):
    data = get_weather(city)
    degree_sign = u'\N{DEGREE SIGN}'
    main_data = data['list'][0]
    data_final = {}
    data_final['temp_real'] = str(main_data['main']['temp'])
    data_final['temp_feels'] = str(main_data['main']['feels_like'])
    data_final['pressure'] = str(round(main_data['main']['pressure'] * 100 / 101325 * 760))
    data_final['humidity'] = str(main_data['main']['humidity']) + '%'
    data_final['wind_speed'] = str(main_data['wind']['speed'])
    wind_degree_to_count = main_data['wind']['deg']
    if (337.5 <= wind_degree_to_count <= 360) or (0 <= wind_degree_to_count <= 22.5):
        data_final['wind_degree'] = '—Å–µ–≤–µ—Ä–Ω—ã–π'
    elif 22.5 < wind_degree_to_count < 67.5:
        data_final['wind_degree'] = '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif 67.5 <= wind_degree_to_count <= 112.5:
        data_final['wind_degree'] = '–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif (112.5 < wind_degree_to_count < 157.5):
        data_final['wind_degree'] = '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
    elif (157.5 <= wind_degree_to_count <= 202.5):
        data_final['wind_degree'] = '—é–∂–Ω—ã–π'
    elif (202.5 < wind_degree_to_count < 247.5):
        data_final['wind_degree'] = '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
    elif (247.5 <= wind_degree_to_count <= 292.5):
        data_final['wind_degree'] = '–∑–∞–ø–∞–¥–Ω—ã–π'
    else:
        data_final['wind_degree'] = '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
    data_final['rain'] = main_data['rain']
    data_final['snow'] = main_data['snow']
    data_final['description'] = main_data['weather'][0]['description']
    return data_final


def get_weather_days(city: str):
    res = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                       params={'lat': str(geo_pos(city)[0]), 'lon': str(geo_pos(city)[1]),
                               'type': 'like', 'units': 'metric', 'APPID': "aee03afe0ed04072dcaf918fcf3ba110",
                               'lang': 'ru'})
    data = res.json()
    return data


def give_weather_days(city: str):
    data = get_weather_days(city)
    main_data = data['list']
    data_final = {'day0': {}, 'day1': {}, 'day2': {}, 'day3': {}, 'day4': {}}
    degree_sign = u'\N{DEGREE SIGN}'
    for i in range(0, len(main_data), 8):
        data_final[f'day{str(i // 8)}']['temp_real'] = str(main_data[i]['main']['temp'])
        data_final[f'day{str(i // 8)}']['temp_feels'] = str(main_data[i]['main']['feels_like'])
        data_final[f'day{str(i // 8)}']['pressure'] = str(round(main_data[i]['main']['pressure'] * 100 / 101325 * 760))
        data_final[f'day{str(i // 8)}']['humidity'] = str(main_data[i]['main']['humidity']) + '%'
        data_final[f'day{str(i // 8)}']['wind_speed'] = str(main_data[i]['wind']['speed'])
        wind_degree_to_count = main_data[i]['wind']['deg']
        if (337.5 <= wind_degree_to_count <= 360) or (0 <= wind_degree_to_count <= 22.5):
            data_final[f'day{str(i // 8)}']['wind_degree'] = '—Å–µ–≤–µ—Ä–Ω—ã–π'
        elif (22.5 < wind_degree_to_count < 67.5):
            data_final[f'day{str(i // 8)}']['wind_degree'] = '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
        elif (67.5 <= wind_degree_to_count <= 112.5):
            data_final[f'day{str(i // 8)}']['wind_degree'] = '–≤–æ—Å—Ç–æ—á–Ω—ã–π'
        elif (112.5 < wind_degree_to_count < 157.5):
            data_final[f'day{str(i // 8)}']['wind_degree'] = '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π'
        elif (157.5 <= wind_degree_to_count <= 202.5):
            data_final[f'day{str(i // 8)}']['wind_degree'] = '—é–∂–Ω—ã–π'
        elif (202.5 < wind_degree_to_count < 247.5):
            data_final[f'day{str(i // 8)}']['wind_degree'] = '—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
        elif (247.5 <= wind_degree_to_count <= 292.5):
            data_final[f'day{str(i // 8)}']['wind_degree'] = '–∑–∞–ø–∞–¥–Ω—ã–π'
        else:
            data_final[f'day{str(i // 8)}']['wind_degree'] = '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π'
        data_final[f'day{str(i // 8)}']['description'] = main_data[i]['weather'][0]['description']
    return data_final


def print_weather_now(city: str):
    data = give_weather_now(city)
    precipitation = ''
    if (data['rain'] == None) and (data['snow'] == None):
        precipitation = '–û—Å–∞–¥–∫–æ–≤ –Ω–µ—Ç'
    elif data['rain'] != None:
        precipitation = '–ò–¥–µ—Ç –¥–æ–∂–¥—å'
    else:
        precipitation = '–ò–¥–µ—Ç —Å–Ω–µ–≥'
    result = f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city.title()} —Å–µ–π—á–∞—Å: \n' \
             f'–ù–∞ —É–ª–∏—Ü–µ {data["description"]}\n' \
             f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ {round(float(data["temp_real"]))}{degree_sign}C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(float(data["temp_feels"]))} {degree_sign}C \n' \
             f'–í–µ—Ç–µ—Ä {data["wind_degree"]}, {round(float(data["wind_speed"]))} –º/—Å \n' \
             f'–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {data["pressure"]} –º–º —Ä—Ç.—Å—Ç. \n' \
             f'–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ {data["humidity"]}'

    return result


def print_weather_days(city: str):
    data = give_weather_days(city)
    first = datetime.date.today()
    days = ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞']
    for i in range(2, 5):
        days.append(
            str((first + datetime.timedelta(days=i)).day) + '.' + str((first + datetime.timedelta(days=i)).month))
    result = [0, 0, 0, 0, 0]
    for i in range(len(days)):
        result[i] = f'{calendar}{days[i]}: {data[f"day{i}"]["description"]} \n' \
                    f'—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {round(float(data[f"day{i}"]["temp_real"]))}{degree_sign}C \n' \
                    f'–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(float(data[f"day{i}"]["temp_feels"]))}{degree_sign}C \n' \
                    f'–≤–µ—Ç–µ—Ä {data[f"day{i}"]["wind_degree"]}, {round(float(data[f"day{i}"]["wind_speed"]))} –º/—Å \n' \
                    f'–≤–ª–∞–∂–Ω–æ—Å—Ç—å {data[f"day{i}"]["humidity"]}\n' \
                    f'–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {data[f"day{i}"]["pressure"]} –º–º —Ä—Ç.—Å—Ç.'
    new_result = '\n\n'.join(result)

    return new_result


def print_tips(city: str):
    data_for_tips = give_weather_now(city)
    result = ''
    if data_for_tips['rain'] != None:
        result += '–í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç–∏–∫, –Ω–∞ —É–ª–∏—Ü–µ –¥–æ–∂–¥—å \n'
    if (5 <= float(data_for_tips['wind_speed']) < 10) and (float(data_for_tips['temp_real']) < 10):
        result += '–ù–∞ —É–ª–∏—Ü–µ –≤–µ—Ç—Ä–µ–Ω–æ, –Ω–∞–¥–µ–Ω—å—Ç–µ —à–∞—Ä—Ñ \n'
    if float(data_for_tips['wind_speed']) >= 10:
        result += '–ù–∞ —É–ª–∏—Ü–µ —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã \n'
    if float(data_for_tips['pressure']) < 750:
        result += '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ —É—Ö—É–¥—à–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è \n'
    if float(data_for_tips['pressure']) > 770:
        result += '–ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ —É—Ö—É–¥—à–µ–Ω–∏–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è'
    return result


TOKEN = '5871029941:AAH15Zi9tFkwEZft9GSvj3a-dKNo6P0VWDE'
weather_id = "aee03afe0ed04072dcaf918fcf3ba110"
bot = telebot.TeleBot(TOKEN)
data = {}


@bot.message_handler(commands=['start', 'help', 'tips'])
def command_answers(message):
    if message.text == '/start':
        bot.send_message(message.from_user.id,wave_hand)
        bot.send_message(message.from_user.id,
                         "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞ \n"
                         "–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–µ–º, –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ /help ")
        data_all[str(message.from_user.id)] = {'city': '', 'tips': True }
    if message.text == '/help':
        bot.send_message(message.from_user.id,
                         f'{cityscape} –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–≥–æ–¥–µ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º –≤–∞—Å –≥–æ—Ä–æ–¥–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ. \n '
                         f'{sun} –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—ã–±—Ä–∞—Ç—å, —Ö–æ—Ç–∏—Ç–µ –≤—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç '
                         f'–≤—Ä–µ–º–µ–Ω–∏ '
                         '–∏–ª–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π.\n'
                         f'{umbrella} –¢–∞–∫–∂–µ –±–æ—Ç —É–º–µ–µ—Ç –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø–æ —Ç–æ–º—É –∫–∞–∫ –æ–¥–µ–≤–∞—Ç—å—Å—è –∏ –∫–∞–∫ –Ω–∞–¥–æ —Å–µ–±—è –≤–µ—Å—Ç–∏ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–≥–æ–¥–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ /tips'
                         )
    if message.text == '/tips':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–î–∞")
        btn2 = types.KeyboardButton("–ù–µ—Ç")
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –±–æ—Ç–∞?".format(message.from_user), reply_markup=markup)

@bot.message_handler(content_types=['text'])
def send_weather(message):
    try:
        geolocator = geocoders.Nominatim(user_agent="telebot")
        location = geolocator.geocode(message.text)
        if message.text == '–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å':
            markup = telebot.types.ReplyKeyboardRemove()
            s = print_tips(data_all[str(message.from_user.id)]['city'])
            bot.send_message(message.from_user.id, print_weather_now(data_all[str(message.from_user.id)]['city']), reply_markup = markup)
            if data_all[str(message.from_user.id)]['tips'] == True and s != '':
                bot.send_message(message.from_user.id, s)
        elif message.text == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π':
            markup = telebot.types.ReplyKeyboardRemove()
            result = print_weather_days(data_all[str(message.from_user.id)]['city'])
            bot.send_message(message.from_user.id, result, reply_markup=markup)
        elif message.text == '–î–∞':
            markup = telebot.types.ReplyKeyboardRemove()
            data_all[str(message.from_user.id)]['tips'] = True
            bot.send_message(message.from_user.id, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã', reply_markup=markup)
        elif message.text == '–ù–µ—Ç':
            markup = telebot.types.ReplyKeyboardRemove()
            data_all[str(message.from_user.id)]['tips'] = False
            bot.send_message(message.from_user.id, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã', reply_markup=markup)
        elif location != None:
            data_all[str(message.from_user.id)]['city'] = message.text
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
            btn2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π")
            markup.add(btn1,btn2)
            bot.send_message(message.from_user.id, '–ö–∞–∫–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?'.format(message.from_user), reply_markup=markup)
        else:
            bot.send_message(message.from_user.id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
    except:
        markup = telebot.types.ReplyKeyboardRemove()
        bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start', reply_markup = markup)


bot.polling(none_stop=True, interval=0)
